class Solution{
public:
    vector<int>temp;
    void precompute(){
        vector<bool>Prime(1000001,true);
        Prime[0]=false;
        Prime[1]=false;
        for(int i=2;i<1000000;i++){
            if(Prime[i]){
                temp.push_back(i);
                for(int j=2*i;j<=1000000;j+=i){
                    Prime[j]=false;
                }
            }
        }
    }
    void DFS(int node,vector<bool>&visit,vector<vector<int>>&g, int &ans){
        visit[node]=true;
        for(auto i:g[node]){
            if(visit[i]==false){
                DFS(i,visit,g,ans);
            }
        }
        ans++;
    }
    int helpSanta(int n, int m, vector<vector<int>> &g){
       vector<bool>visit(n+1,false);
       int mx=0;
        for(int i=1;i<=n;i++){
            if(visit[i]==false){
                int ans=0;
                DFS(i,visit,g,ans);
                mx=max(mx,ans);
            }
        }
        if(mx==1) return -1;
        return temp[mx-1];
    }
};
